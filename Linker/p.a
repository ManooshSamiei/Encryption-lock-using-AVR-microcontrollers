;//Final Project : "CRYPTOGRAPHY SYSTEM"
;//Name: MANOOSH SAMIEI
;//Student No:94242070
;/*!!!!!ATTENTION!!!!!: Please do not enter the numbers
;on the keypad too quickly! because it leads to system's confusion!
;press the next number after the first one is completely turned to a '*' shape!  */
;
;
;#include <delay.h>
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;unsigned char str[20];//string used for printing keypad number on the lcd
;unsigned char key;//keypad number
;unsigned char data[4]={0x00,0x00,0x00,0x00};//the entered password
;unsigned char pass[4]={0x01,0x03,0x09,0x06};//the right password

	.DSEG
;unsigned char t,c,b,a,compare=0;
;char i,k,j=0;
;
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A compare++;
;PCODE: $0000000F VOL: 0
; 0000 001B if(compare==2){
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001C t++;  //t will be 500 ms
;PCODE: $00000013 VOL: 0
; 0000 001D compare=0;}
;PCODE: $00000014 VOL: 0
; 0000 001E }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;#define ADC_VREF_TYPE 0x20
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0024 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0025 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000001B VOL: 0
;	adc_input -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026 // Delay needed for the stabilization of the ADC input voltage
; 0000 0027 delay_us(10);
;PCODE: $0000001F VOL: 0
; 0000 0028 // Start the AD conversion
; 0000 0029 ADCSRA|=0x40;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002A // Wait for the AD conversion to complete
; 0000 002B while ((ADCSRA & 0x10)==0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002C ADCSRA|=0x10;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002D return ADCH;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E }
;PCODE: $0000002E VOL: 0
;
;
;void keyboard (void){   // keypad function
; 0000 0031 void keyboard (void){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0032 PORTD.0=0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0033 delay_ms(2);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0034 if(PIND.3==0){key=1;}
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0035 if(PIND.4==0){key=4;}
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0036 if(PIND.5==0){key=7;}
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0037 if(PIND.6==0){ //holding key '*' for 1 sec
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0038 delay_ms(1000);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0039  if(PIND.6==0){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003A  key='*';}}
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003B PORTD.0=1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003C 
; 0000 003D PORTD.1=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003E delay_ms(2);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003F if(PIND.3==0){key=2;}
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0040 if(PIND.4==0){key=5;}
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0041 if(PIND.5==0){key=8;}
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0042 if(PIND.6==0){key=0;}
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0043 PORTD.1=1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0044 
; 0000 0045 PORTD.2=0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0046 delay_ms(2);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0047 if(PIND.3==0){key=3;}
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0048 if(PIND.4==0){key=6;}
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0049 if(PIND.5==0){key=9;}
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 004A if(PIND.6==0){key='#';}
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004B PORTD.2=1;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004C }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;
;interrupt [EXT_INT2] void ext_int2_isr(void) //interrupt function
; 0000 004F {
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0050     #asm("cli");
;PCODE: $00000097 VOL: 0
	cli
;PCODE: $00000098 VOL: 0
; 0000 0051     PORTD=0x7F;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0052     keyboard();
;PCODE: $0000009B VOL: 0
; 0000 0053     PORTD=0x78;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0054     #asm("sei");
;PCODE: $0000009E VOL: 0
	sei
;PCODE: $0000009F VOL: 0
; 0000 0055 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;
;void readpass (void){ //receiving password from user
; 0000 0058 void readpass (void){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0059      while(1){
;PCODE: $000000A5 VOL: 0
; 0000 005A       if(key!=10){
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 005B       if(i==0){
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 005C       lcd_clear();}
;PCODE: $000000AB VOL: 0
; 0000 005D 
; 0000 005E       lcd_gotoxy(i,0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 005F       sprintf(str,"%d",key);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0060       lcd_puts(str);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0061       t=0;        //500 ms delay generated by timer 0 in compare match mode
;PCODE: $000000BE VOL: 0
; 0000 0062       compare=0;
;PCODE: $000000BF VOL: 0
; 0000 0063       while(t<1){;}
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0064       lcd_gotoxy(i,0);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0065       lcd_putchar('*');
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0066       data[i]=key;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0067       i++;
;PCODE: $000000CF VOL: 0
; 0000 0068       key=10;}
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0069 
; 0000 006A       if(i==4){   //when all 4 digits of password are received break occurs and loop is ended
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 006B       i=0;
;PCODE: $000000D6 VOL: 0
; 0000 006C       break;}
;PCODE: $000000D7 VOL: 0
; 0000 006D 
; 0000 006E       }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 006F        }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;void checkpass (void){    //checking the password
; 0000 0071 void checkpass (void){
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0072 
; 0000 0073       for(j=0;j<4;j++){  //comparing each component of the two arrays
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0074       if(data[j]==pass[j])
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0075       k++;//if all components are the same k will be equal to 4
;PCODE: $000000F0 VOL: 0
; 0000 0076       }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0077 
; 0000 0078       }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;
;void main(void)
; 0000 007B {
;PCODE: $000000F8 VOL: 0
; 0000 007C char m=0;
; 0000 007D key=20;
;	m -> R17
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 007E 
; 0000 007F // Input/Output Ports initialization
; 0000 0080 // Port A initialization
; 0000 0081 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0082 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0083 PORTA=0x0F;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0084 DDRA=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0085 
; 0000 0086 // Port B initialization
; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0089 PORTB=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 008A DDRB=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 008B 
; 0000 008C // Port C initialization
; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008F PORTC=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0090 DDRC=0xFF;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0091 
; 0000 0092 // Port D initialization
; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 0094 // State7=P State6=P State5=P State4=P State3=P State2=0 State1=0 State0=0
; 0000 0095 PORTD=0x78;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0096 DDRD=0x07;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0097 
; 0000 0098 // Timer/Counter 0 initialization
; 0000 0099 // Clock source: System Clock
; 0000 009A // Clock value: 0.977 kHz
; 0000 009B // Mode: CTC top=OCR0
; 0000 009C // OC0 output: Disconnected
; 0000 009D TCCR0=0x0D;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 009E TCNT0=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 009F OCR0=0xF5;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00A0 
; 0000 00A1 // External Interrupt(s) initialization
; 0000 00A2 // INT0: Off
; 0000 00A3 // INT1: Off
; 0000 00A4 // INT2: On
; 0000 00A5 // INT2 Mode: Rising Edge
; 0000 00A6 GICR|=0x20;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00A7 MCUCR=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00A8 MCUCSR=0x40;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00A9 GIFR=0x20;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00AA 
; 0000 00AB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AC TIMSK=0x02;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00AD 
; 0000 00AE // ADC initialization
; 0000 00AF // ADC Clock frequency: 500.000 kHz
; 0000 00B0 // ADC Voltage Reference: AREF pin
; 0000 00B1 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00B2 ADCSRA=0x81;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00B3 
; 0000 00B4 // Alphanumeric LCD initialization
; 0000 00B5 // Connections are specified in the
; 0000 00B6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B7 // RS - PORTC Bit 0
; 0000 00B8 // RD - PORTC Bit 1
; 0000 00B9 // EN - PORTC Bit 2
; 0000 00BA // D4 - PORTC Bit 4
; 0000 00BB // D5 - PORTC Bit 5
; 0000 00BC // D6 - PORTC Bit 6
; 0000 00BD // D7 - PORTC Bit 7
; 0000 00BE // Characters/line: 16
; 0000 00BF lcd_init(16);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00C0 lcd_clear();
;PCODE: $00000124 VOL: 0
; 0000 00C1 // Global enable interrupts
; 0000 00C2 #asm("sei")
;PCODE: $00000125 VOL: 0
	sei
;PCODE: $00000126 VOL: 0
; 0000 00C3 
; 0000 00C4 while (1)
;PCODE: $00000127 VOL: 0
; 0000 00C5       {
; 0000 00C6 
; 0000 00C7 
; 0000 00C8       if(key==20){ //if no key is pressed, lcd shows "enter password"
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C9       lcd_gotoxy(3,0);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00CA       lcd_puts("enter pass");}
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CB 
; 0000 00CC       if(key!=20 && key!=10){
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00CD       if(key!='#' && key!='*'){ //receiving password from the user
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00CE       readpass();
;PCODE: $00000147 VOL: 0
; 0000 00CF       } }
;PCODE: $00000148 VOL: 0
; 0000 00D0 
; 0000 00D1       if(key=='#'){  //comparing the entered password with the right one
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00D2       k=0;
;PCODE: $0000014D VOL: 0
; 0000 00D3       checkpass();
;PCODE: $0000014E VOL: 0
; 0000 00D4 
; 0000 00D5       if(k==4){   // if k is qual to 4 the entered number is equal to the right password
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00D6       lcd_clear();
;PCODE: $00000152 VOL: 0
; 0000 00D7       lcd_putsf("correct");//"correct" is showed on the lcd
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00D8       key=10; //it does not enter any if loop, unitl no number is pressed on the key pad; it means that I allowed the us ...
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00D9       i=0; //in case of entering the password again it helps the program to function correctly (the right place of the c ...
;PCODE: $00000158 VOL: 0
; 0000 00DA       k=0;}
;PCODE: $00000159 VOL: 0
; 0000 00DB 
; 0000 00DC       else { //if the entered number is not equal to the right password
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00DD       t=0; // locking the system for 30 seconds generated by timer 0
;PCODE: $0000015C VOL: 0
; 0000 00DE       compare=0;
;PCODE: $0000015D VOL: 0
; 0000 00DF       lcd_putsf("incorrect");
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00E0       GICR&=0x1f; //disabling the external interrupt( locking the keyboard and the system)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00E1       while(t<60){;}
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00E2       GICR|=0x20;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00E3       lcd_clear();
;PCODE: $0000016D VOL: 0
; 0000 00E4       key=20; // to show"enter password" on lcd
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E5       i=0;  // fixing cursor right location
;PCODE: $00000170 VOL: 0
; 0000 00E6       k=0;}
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00E7       }
; 0000 00E8 
; 0000 00E9       if(key=='*'){ //changing the password
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00EA       lcd_clear();
;PCODE: $00000177 VOL: 0
; 0000 00EB       lcd_putsf("old pass?");
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00EC       key=10;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00ED       readpass();
;PCODE: $0000017D VOL: 0
; 0000 00EE       checkpass(); //check if user has entered the old password correctly
;PCODE: $0000017E VOL: 0
; 0000 00EF       delay_ms(200); //slowing the process , it can also be produced by the timer but for avoiding the program from bein ...
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00F0       if(k==4){
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00F1       lcd_clear();
;PCODE: $00000185 VOL: 0
; 0000 00F2       delay_ms(200);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00F3       lcd_putsf("new pass?");
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00F4       readpass();     //receiving new password from user
;PCODE: $0000018C VOL: 0
; 0000 00F5       for(m=0;m<4;m++){
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00F6       pass[m]=data[m]; //putting the new password into the old password
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00F7       }
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00F8       key=20;     //check if the new password works correctly
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00F9       lcd_clear();
;PCODE: $000001A5 VOL: 0
; 0000 00FA       delay_ms(200);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00FB       }
; 0000 00FC 
; 0000 00FD       else if(k!=4){  // if the old password is not entered correctly goes to the first state: "enter password"
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00FE       key=20;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00FF       lcd_clear();}
;PCODE: $000001B0 VOL: 0
; 0000 0100       }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0101 
; 0000 0102       a=read_adc(0); //reseting password by applying a 2 volt voltage difference between pins adc0 and adc1
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0103       b=read_adc(1);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0104       c=cabs(a-b);  // absolute value of a & b difference
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0105       if(c==102){ // 2*255/5 , vref is 5 volts
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0106       key=10;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0107       lcd_gotoxy(3,0);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0108       lcd_putsf("reset pass");}
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0109 
; 0000 010A       }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 010B }
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0

	.DSEG
_0x32:
	.BYTE 0xB
