
AVRASM ver. 2.1.30  C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm Wed Dec 12 20:56:41 2018

C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _key=R5
                 	.DEF _t=R4
                 	.DEF _c=R7
                 	.DEF _b=R6
                 	.DEF _a=R9
                 	.DEF _compare=R8
                 	.DEF _i=R11
                 	.DEF _k=R10
                 	.DEF _j=R13
                 	.DEF __lcd_x=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 00fc 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 009f 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000      	.DB  0x0,0x0
                 
                 _0x3:
000036 0301
000037 0609      	.DB  0x1,0x3,0x9,0x6
                 _0x0:
000038 6425
000039 6500
00003a 746e
00003b 7265      	.DB  0x25,0x64,0x0,0x65,0x6E,0x74,0x65,0x72
00003c 7020
00003d 7361
00003e 0073
00003f 6f63      	.DB  0x20,0x70,0x61,0x73,0x73,0x0,0x63,0x6F
000040 7272
000041 6365
000042 0074
000043 6e69      	.DB  0x72,0x72,0x65,0x63,0x74,0x0,0x69,0x6E
000044 6f63
000045 7272
000046 6365
000047 0074      	.DB  0x63,0x6F,0x72,0x72,0x65,0x63,0x74,0x0
000048 6c6f
000049 2064
00004a 6170
00004b 7373      	.DB  0x6F,0x6C,0x64,0x20,0x70,0x61,0x73,0x73
00004c 003f
00004d 656e
00004e 2077
00004f 6170      	.DB  0x3F,0x0,0x6E,0x65,0x77,0x20,0x70,0x61
000050 7373
000051 003f
000052 6572
000053 6573      	.DB  0x73,0x73,0x3F,0x0,0x72,0x65,0x73,0x65
000054 2074
000055 6170
000056 7373
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1149): warning: .cseg .db misalignment - padding zero byte
000057 0000      	.DB  0x74,0x20,0x70,0x61,0x73,0x73,0x0
                 _0x2000003:
000058 c080      	.DB  0x80,0xC0
                 _0x2040060:
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1153): warning: .cseg .db misalignment - padding zero byte
000059 0001      	.DB  0x1
                 _0x2040000:
00005a 4e2d
00005b 4e41
00005c 4900
00005d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ASUS\Desktop\github\encryption lock_\final project\List\p.asm(1156): warning: .cseg .db misalignment - padding zero byte
00005e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005f 0006      	.DW  0x06
000060 0008      	.DW  0x08
000061 0066      	.DW  __REG_VARS*2
                 
000062 0004      	.DW  0x04
000063 0283      	.DW  _pass
000064 006c      	.DW  _0x3*2
                 
000065 000b      	.DW  0x0B
000066 0260      	.DW  _0x32
000067 0073      	.DW  _0x0*2+3
                 
000068 0002      	.DW  0x02
000069 0287      	.DW  __base_y_G100
00006a 00b0      	.DW  _0x2000003*2
                 
00006b 0001      	.DW  0x01
00006c 028d      	.DW  __seed_G102
00006d 00b2      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00006e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bffb      	OUT  GICR,R31
000074 bfeb      	OUT  GICR,R30
000075 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000076 e1f8      	LDI  R31,0x18
000077 bdf1      	OUT  WDTCR,R31
000078 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000079 e08d      	LDI  R24,(14-2)+1
00007a e0a2      	LDI  R26,2
00007b 27bb      	CLR  R27
                 __CLEAR_REG:
00007c 93ed      	ST   X+,R30
00007d 958a      	DEC  R24
00007e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000080 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000081 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000082 93ed      	ST   X+,R30
000083 9701      	SBIW R24,1
000084 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000085 ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000086 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000087 9185      	LPM  R24,Z+
000088 9195      	LPM  R25,Z+
000089 9700      	SBIW R24,0
00008a f061      	BREQ __GLOBAL_INI_END
00008b 91a5      	LPM  R26,Z+
00008c 91b5      	LPM  R27,Z+
00008d 9005      	LPM  R0,Z+
00008e 9015      	LPM  R1,Z+
00008f 01bf      	MOVW R22,R30
000090 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000091 9005      	LPM  R0,Z+
000092 920d      	ST   X+,R0
000093 9701      	SBIW R24,1
000094 f7e1      	BRNE __GLOBAL_INI_LOOP
000095 01fb      	MOVW R30,R22
000096 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000097 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000098 bfed      	OUT  SPL,R30
000099 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009d 940c 0169 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;//Final Project : "Encryption SYSTEM"
                 ;//Name: MANOOSH SAMIEI
                 ;//Student No:94242070
                 ;/*!!!!!ATTENTION!!!!!: Please do not enter the numbers
                 ;on the keypad too quickly! because it leads to system's confusion!
                 ;press the next number after the first one is completely turned to a '*' shape!  */
                 ;
                 ;
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;unsigned char str[20];//string used for printing keypad number on the lcd
                 ;unsigned char key;//keypad number
                 ;unsigned char data[4]={0x00,0x00,0x00,0x00};//the entered password
                 ;unsigned char pass[4]={0x01,0x03,0x09,0x06};//the right password
                 
                 	.DSEG
                 ;unsigned char t,c,b,a,compare=0;
                 ;char i,k,j=0;
                 ;
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
00009f 93ea      	ST   -Y,R30
0000a0 b7ef      	IN   R30,SREG
0000a1 93ea      	ST   -Y,R30
                 ; 0000 001A compare++;
0000a2 9483      	INC  R8
                 ; 0000 001B if(compare==2){
0000a3 e0e2      	LDI  R30,LOW(2)
0000a4 15e8      	CP   R30,R8
0000a5 f411      	BRNE _0x4
                 ; 0000 001C t++;  //t will be 500 ms
0000a6 9443      	INC  R4
                 ; 0000 001D compare=0;}
0000a7 2488      	CLR  R8
                 ; 0000 001E }
                 _0x4:
0000a8 91e9      	LD   R30,Y+
0000a9 bfef      	OUT  SREG,R30
0000aa 91e9      	LD   R30,Y+
0000ab 9518      	RETI
                 ; .FEND
                 ;
                 ;#define ADC_VREF_TYPE 0x20
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0024 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0025 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
0000ac 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000ad 81e8      	LD   R30,Y
0000ae 62e0      	ORI  R30,0x20
0000af b9e7      	OUT  0x7,R30
                 ; 0000 0026 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0027 delay_us(10);
                +
0000b0 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000b1 958a     +DEC R24
0000b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0028 // Start the AD conversion
                 ; 0000 0029 ADCSRA|=0x40;
0000b3 9a36      	SBI  0x6,6
                 ; 0000 002A // Wait for the AD conversion to complete
                 ; 0000 002B while ((ADCSRA & 0x10)==0);
                 _0x5:
0000b4 9b34      	SBIS 0x6,4
0000b5 cffe      	RJMP _0x5
                 ; 0000 002C ADCSRA|=0x10;
0000b6 9a34      	SBI  0x6,4
                 ; 0000 002D return ADCH;
0000b7 b1e5      	IN   R30,0x5
0000b8 e0f0      	LDI  R31,0
0000b9 940c 02bb 	JMP  _0x20C0002
                 ; 0000 002E }
                 ; .FEND
                 ;
                 ;
                 ;void keyboard (void){   // keypad function
                 ; 0000 0031 void keyboard (void){
                 _keyboard:
                 ; .FSTART _keyboard
                 ; 0000 0032 PORTD.0=0;
0000bb 9890      	CBI  0x12,0
                 ; 0000 0033 delay_ms(2);
0000bc 940e 0484 	CALL SUBOPT_0x0
                 ; 0000 0034 if(PIND.3==0){key=1;}
0000be 9983      	SBIC 0x10,3
0000bf c002      	RJMP _0xA
0000c0 e0e1      	LDI  R30,LOW(1)
0000c1 2e5e      	MOV  R5,R30
                 ; 0000 0035 if(PIND.4==0){key=4;}
                 _0xA:
0000c2 9984      	SBIC 0x10,4
0000c3 c002      	RJMP _0xB
0000c4 e0e4      	LDI  R30,LOW(4)
0000c5 2e5e      	MOV  R5,R30
                 ; 0000 0036 if(PIND.5==0){key=7;}
                 _0xB:
0000c6 9985      	SBIC 0x10,5
0000c7 c002      	RJMP _0xC
0000c8 e0e7      	LDI  R30,LOW(7)
0000c9 2e5e      	MOV  R5,R30
                 ; 0000 0037 if(PIND.6==0){ //holding key '*' for 1 sec
                 _0xC:
0000ca 9986      	SBIC 0x10,6
0000cb c008      	RJMP _0xD
                 ; 0000 0038 delay_ms(1000);
0000cc eea8      	LDI  R26,LOW(1000)
0000cd e0b3      	LDI  R27,HIGH(1000)
0000ce 940e 04c5 	CALL _delay_ms
                 ; 0000 0039  if(PIND.6==0){
0000d0 9986      	SBIC 0x10,6
0000d1 c002      	RJMP _0xE
                 ; 0000 003A  key='*';}}
0000d2 e2ea      	LDI  R30,LOW(42)
0000d3 2e5e      	MOV  R5,R30
                 _0xE:
                 ; 0000 003B PORTD.0=1;
                 _0xD:
0000d4 9a90      	SBI  0x12,0
                 ; 0000 003C 
                 ; 0000 003D PORTD.1=0;
0000d5 9891      	CBI  0x12,1
                 ; 0000 003E delay_ms(2);
0000d6 940e 0484 	CALL SUBOPT_0x0
                 ; 0000 003F if(PIND.3==0){key=2;}
0000d8 9983      	SBIC 0x10,3
0000d9 c002      	RJMP _0x13
0000da e0e2      	LDI  R30,LOW(2)
0000db 2e5e      	MOV  R5,R30
                 ; 0000 0040 if(PIND.4==0){key=5;}
                 _0x13:
0000dc 9984      	SBIC 0x10,4
0000dd c002      	RJMP _0x14
0000de e0e5      	LDI  R30,LOW(5)
0000df 2e5e      	MOV  R5,R30
                 ; 0000 0041 if(PIND.5==0){key=8;}
                 _0x14:
0000e0 9985      	SBIC 0x10,5
0000e1 c002      	RJMP _0x15
0000e2 e0e8      	LDI  R30,LOW(8)
0000e3 2e5e      	MOV  R5,R30
                 ; 0000 0042 if(PIND.6==0){key=0;}
                 _0x15:
0000e4 9b86      	SBIS 0x10,6
0000e5 2455      	CLR  R5
                 ; 0000 0043 PORTD.1=1;
0000e6 9a91      	SBI  0x12,1
                 ; 0000 0044 
                 ; 0000 0045 PORTD.2=0;
0000e7 9892      	CBI  0x12,2
                 ; 0000 0046 delay_ms(2);
0000e8 940e 0484 	CALL SUBOPT_0x0
                 ; 0000 0047 if(PIND.3==0){key=3;}
0000ea 9983      	SBIC 0x10,3
0000eb c002      	RJMP _0x1B
0000ec e0e3      	LDI  R30,LOW(3)
0000ed 2e5e      	MOV  R5,R30
                 ; 0000 0048 if(PIND.4==0){key=6;}
                 _0x1B:
0000ee 9984      	SBIC 0x10,4
0000ef c002      	RJMP _0x1C
0000f0 e0e6      	LDI  R30,LOW(6)
0000f1 2e5e      	MOV  R5,R30
                 ; 0000 0049 if(PIND.5==0){key=9;}
                 _0x1C:
0000f2 9985      	SBIC 0x10,5
0000f3 c002      	RJMP _0x1D
0000f4 e0e9      	LDI  R30,LOW(9)
0000f5 2e5e      	MOV  R5,R30
                 ; 0000 004A if(PIND.6==0){key='#';}
                 _0x1D:
0000f6 9986      	SBIC 0x10,6
0000f7 c002      	RJMP _0x1E
0000f8 e2e3      	LDI  R30,LOW(35)
0000f9 2e5e      	MOV  R5,R30
                 ; 0000 004B PORTD.2=1;
                 _0x1E:
0000fa 9a92      	SBI  0x12,2
                 ; 0000 004C }
0000fb 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void) //interrupt function
                 ; 0000 004F {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000fc 920a      	ST   -Y,R0
0000fd 921a      	ST   -Y,R1
0000fe 92fa      	ST   -Y,R15
0000ff 936a      	ST   -Y,R22
000100 937a      	ST   -Y,R23
000101 938a      	ST   -Y,R24
000102 939a      	ST   -Y,R25
000103 93aa      	ST   -Y,R26
000104 93ba      	ST   -Y,R27
000105 93ea      	ST   -Y,R30
000106 93fa      	ST   -Y,R31
000107 b7ef      	IN   R30,SREG
000108 93ea      	ST   -Y,R30
                 ; 0000 0050     #asm("cli");
000109 94f8      	cli
                 ; 0000 0051     PORTD=0x7F;
00010a e7ef      	LDI  R30,LOW(127)
00010b bbe2      	OUT  0x12,R30
                 ; 0000 0052     keyboard();
00010c dfae      	RCALL _keyboard
                 ; 0000 0053     PORTD=0x78;
00010d e7e8      	LDI  R30,LOW(120)
00010e bbe2      	OUT  0x12,R30
                 ; 0000 0054     #asm("sei");
00010f 9478      	sei
                 ; 0000 0055 }
000110 91e9      	LD   R30,Y+
000111 bfef      	OUT  SREG,R30
000112 91f9      	LD   R31,Y+
000113 91e9      	LD   R30,Y+
000114 91b9      	LD   R27,Y+
000115 91a9      	LD   R26,Y+
000116 9199      	LD   R25,Y+
000117 9189      	LD   R24,Y+
000118 9179      	LD   R23,Y+
000119 9169      	LD   R22,Y+
00011a 90f9      	LD   R15,Y+
00011b 9019      	LD   R1,Y+
00011c 9009      	LD   R0,Y+
00011d 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void readpass (void){ //receiving password from user
                 ; 0000 0058 void readpass (void){
                 _readpass:
                 ; .FSTART _readpass
                 ; 0000 0059      while(1){
                 _0x21:
                 ; 0000 005A       if(key!=10){
00011e e0ea      	LDI  R30,LOW(10)
00011f 15e5      	CP   R30,R5
000120 f169      	BREQ _0x24
                 ; 0000 005B       if(i==0){
000121 20bb      	TST  R11
000122 f409      	BRNE _0x25
                 ; 0000 005C       lcd_clear();}
000123 d122      	RCALL _lcd_clear
                 ; 0000 005D 
                 ; 0000 005E       lcd_gotoxy(i,0);
                 _0x25:
000124 92ba      	ST   -Y,R11
000125 e0a0      	LDI  R26,LOW(0)
000126 d110      	RCALL _lcd_gotoxy
                 ; 0000 005F       sprintf(str,"%d",key);
000127 e6eb      	LDI  R30,LOW(_str)
000128 e0f2      	LDI  R31,HIGH(_str)
000129 93fa      	ST   -Y,R31
00012a 93ea      	ST   -Y,R30
                +
00012b e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00012c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00012d 93fa      	ST   -Y,R31
00012e 93ea      	ST   -Y,R30
00012f 2de5      	MOV  R30,R5
000130 27ff      	CLR  R31
000131 2766      	CLR  R22
000132 2777      	CLR  R23
000133 940e 04df 	CALL __PUTPARD1
000135 e084      	LDI  R24,4
000136 940e 0431 	CALL _sprintf
000138 9628      	ADIW R28,8
                 ; 0000 0060       lcd_puts(str);
000139 e6ab      	LDI  R26,LOW(_str)
00013a e0b2      	LDI  R27,HIGH(_str)
00013b d131      	RCALL _lcd_puts
                 ; 0000 0061       t=0;        //500 ms delay generated by timer 0 in compare match mode
00013c 2444      	CLR  R4
                 ; 0000 0062       compare=0;
00013d 2488      	CLR  R8
                 ; 0000 0063       while(t<1){;}
                 _0x26:
00013e e0e1      	LDI  R30,LOW(1)
00013f 164e      	CP   R4,R30
000140 f3e8      	BRLO _0x26
                 ; 0000 0064       lcd_gotoxy(i,0);
000141 92ba      	ST   -Y,R11
000142 e0a0      	LDI  R26,LOW(0)
000143 d0f3      	RCALL _lcd_gotoxy
                 ; 0000 0065       lcd_putchar('*');
000144 e2aa      	LDI  R26,LOW(42)
000145 d10d      	RCALL _lcd_putchar
                 ; 0000 0066       data[i]=key;
000146 2deb      	MOV  R30,R11
000147 e0f0      	LDI  R31,0
000148 58e1      	SUBI R30,LOW(-_data)
000149 4ffd      	SBCI R31,HIGH(-_data)
00014a 8250      	ST   Z,R5
                 ; 0000 0067       i++;
00014b 94b3      	INC  R11
                 ; 0000 0068       key=10;}
00014c e0ea      	LDI  R30,LOW(10)
00014d 2e5e      	MOV  R5,R30
                 ; 0000 0069 
                 ; 0000 006A       if(i==4){   //when all 4 digits of password are received break occurs and loop is ended
                 _0x24:
00014e e0e4      	LDI  R30,LOW(4)
00014f 15eb      	CP   R30,R11
000150 f411      	BRNE _0x29
                 ; 0000 006B       i=0;
000151 24bb      	CLR  R11
                 ; 0000 006C       break;}
000152 c001      	RJMP _0x23
                 ; 0000 006D 
                 ; 0000 006E       }
                 _0x29:
000153 cfca      	RJMP _0x21
                 _0x23:
                 ; 0000 006F        }
000154 9508      	RET
                 ; .FEND
                 ;
                 ;void checkpass (void){    //checking the password
                 ; 0000 0071 void checkpass (void){
                 _checkpass:
                 ; .FSTART _checkpass
                 ; 0000 0072 
                 ; 0000 0073       for(j=0;j<4;j++){  //comparing each component of the two arrays
000155 24dd      	CLR  R13
                 _0x2B:
000156 e0e4      	LDI  R30,LOW(4)
000157 16de      	CP   R13,R30
000158 f478      	BRSH _0x2C
                 ; 0000 0074       if(data[j]==pass[j])
000159 2ded      	MOV  R30,R13
00015a e0f0      	LDI  R31,0
00015b 58e1      	SUBI R30,LOW(-_data)
00015c 4ffd      	SBCI R31,HIGH(-_data)
00015d 81a0      	LD   R26,Z
00015e 2ded      	MOV  R30,R13
00015f e0f0      	LDI  R31,0
000160 57ed      	SUBI R30,LOW(-_pass)
000161 4ffd      	SBCI R31,HIGH(-_pass)
000162 81e0      	LD   R30,Z
000163 17ea      	CP   R30,R26
000164 f409      	BRNE _0x2D
                 ; 0000 0075       k++;//if all components are the same k will be equal to 4
000165 94a3      	INC  R10
                 ; 0000 0076       }
                 _0x2D:
000166 94d3      	INC  R13
000167 cfee      	RJMP _0x2B
                 _0x2C:
                 ; 0000 0077 
                 ; 0000 0078       }
000168 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 007B {
                 _main:
                 ; .FSTART _main
                 ; 0000 007C char m=0;
                 ; 0000 007D key=20;
                 ;	m -> R17
000169 e010      	LDI  R17,0
00016a e1e4      	LDI  R30,LOW(20)
00016b 2e5e      	MOV  R5,R30
                 ; 0000 007E 
                 ; 0000 007F // Input/Output Ports initialization
                 ; 0000 0080 // Port A initialization
                 ; 0000 0081 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0082 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0083 PORTA=0x0F;
00016c e0ef      	LDI  R30,LOW(15)
00016d bbeb      	OUT  0x1B,R30
                 ; 0000 0084 DDRA=0x00;
00016e e0e0      	LDI  R30,LOW(0)
00016f bbea      	OUT  0x1A,R30
                 ; 0000 0085 
                 ; 0000 0086 // Port B initialization
                 ; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0089 PORTB=0x00;
000170 bbe8      	OUT  0x18,R30
                 ; 0000 008A DDRB=0x00;
000171 bbe7      	OUT  0x17,R30
                 ; 0000 008B 
                 ; 0000 008C // Port C initialization
                 ; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008F PORTC=0x00;
000172 bbe5      	OUT  0x15,R30
                 ; 0000 0090 DDRC=0xFF;
000173 efef      	LDI  R30,LOW(255)
000174 bbe4      	OUT  0x14,R30
                 ; 0000 0091 
                 ; 0000 0092 // Port D initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 0094 // State7=P State6=P State5=P State4=P State3=P State2=0 State1=0 State0=0
                 ; 0000 0095 PORTD=0x78;
000175 e7e8      	LDI  R30,LOW(120)
000176 bbe2      	OUT  0x12,R30
                 ; 0000 0096 DDRD=0x07;
000177 e0e7      	LDI  R30,LOW(7)
000178 bbe1      	OUT  0x11,R30
                 ; 0000 0097 
                 ; 0000 0098 // Timer/Counter 0 initialization
                 ; 0000 0099 // Clock source: System Clock
                 ; 0000 009A // Clock value: 0.977 kHz
                 ; 0000 009B // Mode: CTC top=OCR0
                 ; 0000 009C // OC0 output: Disconnected
                 ; 0000 009D TCCR0=0x0D;
000179 e0ed      	LDI  R30,LOW(13)
00017a bfe3      	OUT  0x33,R30
                 ; 0000 009E TCNT0=0x00;
00017b e0e0      	LDI  R30,LOW(0)
00017c bfe2      	OUT  0x32,R30
                 ; 0000 009F OCR0=0xF5;
00017d efe5      	LDI  R30,LOW(245)
00017e bfec      	OUT  0x3C,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // External Interrupt(s) initialization
                 ; 0000 00A2 // INT0: Off
                 ; 0000 00A3 // INT1: Off
                 ; 0000 00A4 // INT2: On
                 ; 0000 00A5 // INT2 Mode: Rising Edge
                 ; 0000 00A6 GICR|=0x20;
00017f b7eb      	IN   R30,0x3B
000180 62e0      	ORI  R30,0x20
000181 bfeb      	OUT  0x3B,R30
                 ; 0000 00A7 MCUCR=0x00;
000182 e0e0      	LDI  R30,LOW(0)
000183 bfe5      	OUT  0x35,R30
                 ; 0000 00A8 MCUCSR=0x40;
000184 e4e0      	LDI  R30,LOW(64)
000185 bfe4      	OUT  0x34,R30
                 ; 0000 00A9 GIFR=0x20;
000186 e2e0      	LDI  R30,LOW(32)
000187 bfea      	OUT  0x3A,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00AC TIMSK=0x02;
000188 e0e2      	LDI  R30,LOW(2)
000189 bfe9      	OUT  0x39,R30
                 ; 0000 00AD 
                 ; 0000 00AE // ADC initialization
                 ; 0000 00AF // ADC Clock frequency: 500.000 kHz
                 ; 0000 00B0 // ADC Voltage Reference: AREF pin
                 ; 0000 00B1 ADMUX=ADC_VREF_TYPE & 0xff;
00018a e2e0      	LDI  R30,LOW(32)
00018b b9e7      	OUT  0x7,R30
                 ; 0000 00B2 ADCSRA=0x81;
00018c e8e1      	LDI  R30,LOW(129)
00018d b9e6      	OUT  0x6,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // Alphanumeric LCD initialization
                 ; 0000 00B5 // Connections are specified in the
                 ; 0000 00B6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B7 // RS - PORTC Bit 0
                 ; 0000 00B8 // RD - PORTC Bit 1
                 ; 0000 00B9 // EN - PORTC Bit 2
                 ; 0000 00BA // D4 - PORTC Bit 4
                 ; 0000 00BB // D5 - PORTC Bit 5
                 ; 0000 00BC // D6 - PORTC Bit 6
                 ; 0000 00BD // D7 - PORTC Bit 7
                 ; 0000 00BE // Characters/line: 16
                 ; 0000 00BF lcd_init(16);
00018e e1a0      	LDI  R26,LOW(16)
00018f d0ff      	RCALL _lcd_init
                 ; 0000 00C0 lcd_clear();
000190 d0b5      	RCALL _lcd_clear
                 ; 0000 00C1 // Global enable interrupts
                 ; 0000 00C2 #asm("sei")
000191 9478      	sei
                 ; 0000 00C3 
                 ; 0000 00C4 while (1)
                 _0x2E:
                 ; 0000 00C5       {
                 ; 0000 00C6 
                 ; 0000 00C7 
                 ; 0000 00C8       if(key==20){ //if no key is pressed, lcd shows "enter password"
000192 e1e4      	LDI  R30,LOW(20)
000193 15e5      	CP   R30,R5
000194 f439      	BRNE _0x31
                 ; 0000 00C9       lcd_gotoxy(3,0);
000195 e0e3      	LDI  R30,LOW(3)
000196 93ea      	ST   -Y,R30
000197 e0a0      	LDI  R26,LOW(0)
000198 d09e      	RCALL _lcd_gotoxy
                 ; 0000 00CA       lcd_puts("enter pass");}
                +
000199 e6a0     +LDI R26 , LOW ( _0x32 + ( 0 ) )
00019a e0b2     +LDI R27 , HIGH ( _0x32 + ( 0 ) )
                 	__POINTW2MN _0x32,0
00019b d0d1      	RCALL _lcd_puts
                 ; 0000 00CB 
                 ; 0000 00CC       if(key!=20 && key!=10){
                 _0x31:
00019c e1e4      	LDI  R30,LOW(20)
00019d 15e5      	CP   R30,R5
00019e f019      	BREQ _0x34
00019f e0ea      	LDI  R30,LOW(10)
0001a0 15e5      	CP   R30,R5
0001a1 f409      	BRNE _0x35
                 _0x34:
0001a2 c008      	RJMP _0x33
                 _0x35:
                 ; 0000 00CD       if(key!='#' && key!='*'){ //receiving password from the user
0001a3 e2e3      	LDI  R30,LOW(35)
0001a4 15e5      	CP   R30,R5
0001a5 f019      	BREQ _0x37
0001a6 e2ea      	LDI  R30,LOW(42)
0001a7 15e5      	CP   R30,R5
0001a8 f409      	BRNE _0x38
                 _0x37:
0001a9 c001      	RJMP _0x36
                 _0x38:
                 ; 0000 00CE       readpass();
0001aa df73      	RCALL _readpass
                 ; 0000 00CF       } }
                 _0x36:
                 ; 0000 00D0 
                 ; 0000 00D1       if(key=='#'){  //comparing the entered password with the right one
                 _0x33:
0001ab e2e3      	LDI  R30,LOW(35)
0001ac 15e5      	CP   R30,R5
0001ad f4f1      	BRNE _0x39
                 ; 0000 00D2       k=0;
0001ae 24aa      	CLR  R10
                 ; 0000 00D3       checkpass();
0001af dfa5      	RCALL _checkpass
                 ; 0000 00D4 
                 ; 0000 00D5       if(k==4){   // if k is qual to 4 the entered number is equal to the right password
0001b0 e0e4      	LDI  R30,LOW(4)
0001b1 15ea      	CP   R30,R10
0001b2 f431      	BRNE _0x3A
                 ; 0000 00D6       lcd_clear();
0001b3 d092      	RCALL _lcd_clear
                 ; 0000 00D7       lcd_putsf("correct");//"correct" is showed on the lcd
                +
0001b4 e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
0001b5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
0001b6 d0c5      	RCALL _lcd_putsf
                 ; 0000 00D8       key=10; //it does not enter any if loop, unitl no number is pressed on the key pad; it means that I allowed the us ...
0001b7 e0ea      	LDI  R30,LOW(10)
0001b8 c010      	RJMP _0x48
                 ; 0000 00D9       i=0; //in case of entering the password again it helps the program to function correctly (the right place of the c ...
                 ; 0000 00DA       k=0;}
                 ; 0000 00DB 
                 ; 0000 00DC       else { //if the entered number is not equal to the right password
                 _0x3A:
                 ; 0000 00DD       t=0; // locking the system for 30 seconds generated by timer 0
0001b9 2444      	CLR  R4
                 ; 0000 00DE       compare=0;
0001ba 2488      	CLR  R8
                 ; 0000 00DF       lcd_putsf("incorrect");
                +
0001bb e8a6     +LDI R26 , LOW ( 2 * _0x0 + ( 22 ) )
0001bc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW2FN _0x0,22
0001bd d0be      	RCALL _lcd_putsf
                 ; 0000 00E0       GICR&=0x1f; //disabling the external interrupt( locking the keyboard and the system)
0001be b7eb      	IN   R30,0x3B
0001bf 71ef      	ANDI R30,LOW(0x1F)
0001c0 bfeb      	OUT  0x3B,R30
                 ; 0000 00E1       while(t<60){;}
                 _0x3C:
0001c1 e3ec      	LDI  R30,LOW(60)
0001c2 164e      	CP   R4,R30
0001c3 f3e8      	BRLO _0x3C
                 ; 0000 00E2       GICR|=0x20;
0001c4 b7eb      	IN   R30,0x3B
0001c5 62e0      	ORI  R30,0x20
0001c6 bfeb      	OUT  0x3B,R30
                 ; 0000 00E3       lcd_clear();
0001c7 d07e      	RCALL _lcd_clear
                 ; 0000 00E4       key=20; // to show"enter password" on lcd
0001c8 e1e4      	LDI  R30,LOW(20)
                 _0x48:
0001c9 2e5e      	MOV  R5,R30
                 ; 0000 00E5       i=0;  // fixing cursor right location
0001ca 24bb      	CLR  R11
                 ; 0000 00E6       k=0;}
0001cb 24aa      	CLR  R10
                 ; 0000 00E7       }
                 ; 0000 00E8 
                 ; 0000 00E9       if(key=='*'){ //changing the password
                 _0x39:
0001cc e2ea      	LDI  R30,LOW(42)
0001cd 15e5      	CP   R30,R5
0001ce f579      	BRNE _0x3F
                 ; 0000 00EA       lcd_clear();
0001cf d076      	RCALL _lcd_clear
                 ; 0000 00EB       lcd_putsf("old pass?");
                +
0001d0 e9a0     +LDI R26 , LOW ( 2 * _0x0 + ( 32 ) )
0001d1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW2FN _0x0,32
0001d2 d0a9      	RCALL _lcd_putsf
                 ; 0000 00EC       key=10;
0001d3 e0ea      	LDI  R30,LOW(10)
0001d4 2e5e      	MOV  R5,R30
                 ; 0000 00ED       readpass();
0001d5 df48      	RCALL _readpass
                 ; 0000 00EE       checkpass(); //check if user has entered the old password correctly
0001d6 df7e      	RCALL _checkpass
                 ; 0000 00EF       delay_ms(200); //slowing the process , it can also be produced by the timer but for avoiding the program from bein ...
0001d7 940e 0488 	CALL SUBOPT_0x1
                 ; 0000 00F0       if(k==4){
0001d9 e0e4      	LDI  R30,LOW(4)
0001da 15ea      	CP   R30,R10
0001db f4e1      	BRNE _0x40
                 ; 0000 00F1       lcd_clear();
0001dc d069      	RCALL _lcd_clear
                 ; 0000 00F2       delay_ms(200);
0001dd 940e 0488 	CALL SUBOPT_0x1
                 ; 0000 00F3       lcd_putsf("new pass?");
                +
0001df e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
0001e0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
0001e1 d09a      	RCALL _lcd_putsf
                 ; 0000 00F4       readpass();     //receiving new password from user
0001e2 df3b      	RCALL _readpass
                 ; 0000 00F5       for(m=0;m<4;m++){
0001e3 e010      	LDI  R17,LOW(0)
                 _0x42:
0001e4 3014      	CPI  R17,4
0001e5 f460      	BRSH _0x43
                 ; 0000 00F6       pass[m]=data[m]; //putting the new password into the old password
0001e6 2fa1      	MOV  R26,R17
0001e7 e0b0      	LDI  R27,0
0001e8 57ad      	SUBI R26,LOW(-_pass)
0001e9 4fbd      	SBCI R27,HIGH(-_pass)
0001ea 2fe1      	MOV  R30,R17
0001eb e0f0      	LDI  R31,0
0001ec 58e1      	SUBI R30,LOW(-_data)
0001ed 4ffd      	SBCI R31,HIGH(-_data)
0001ee 81e0      	LD   R30,Z
0001ef 93ec      	ST   X,R30
                 ; 0000 00F7       }
0001f0 5f1f      	SUBI R17,-1
0001f1 cff2      	RJMP _0x42
                 _0x43:
                 ; 0000 00F8       key=20;     //check if the new password works correctly
0001f2 e1e4      	LDI  R30,LOW(20)
0001f3 2e5e      	MOV  R5,R30
                 ; 0000 00F9       lcd_clear();
0001f4 d051      	RCALL _lcd_clear
                 ; 0000 00FA       delay_ms(200);
0001f5 940e 0488 	CALL SUBOPT_0x1
                 ; 0000 00FB       }
                 ; 0000 00FC 
                 ; 0000 00FD       else if(k!=4){  // if the old password is not entered correctly goes to the first state: "enter password"
0001f7 c006      	RJMP _0x44
                 _0x40:
0001f8 e0e4      	LDI  R30,LOW(4)
0001f9 15ea      	CP   R30,R10
0001fa f019      	BREQ _0x45
                 ; 0000 00FE       key=20;
0001fb e1e4      	LDI  R30,LOW(20)
0001fc 2e5e      	MOV  R5,R30
                 ; 0000 00FF       lcd_clear();}
0001fd d048      	RCALL _lcd_clear
                 ; 0000 0100       }
                 _0x45:
                 _0x44:
                 ; 0000 0101 
                 ; 0000 0102       a=read_adc(0); //reseting password by applying a 2 volt voltage difference between pins adc0 and adc1
                 _0x3F:
0001fe e0a0      	LDI  R26,LOW(0)
0001ff deac      	RCALL _read_adc
000200 2e9e      	MOV  R9,R30
                 ; 0000 0103       b=read_adc(1);
000201 e0a1      	LDI  R26,LOW(1)
000202 dea9      	RCALL _read_adc
000203 2e6e      	MOV  R6,R30
                 ; 0000 0104       c=cabs(a-b);  // absolute value of a & b difference
000204 2da9      	MOV  R26,R9
000205 19a6      	SUB  R26,R6
000206 940e 0465 	CALL _cabs
000208 2e7e      	MOV  R7,R30
                 ; 0000 0105       if(c==102){ // 2*255/5 , vref is 5 volts
000209 e6e6      	LDI  R30,LOW(102)
00020a 15e7      	CP   R30,R7
00020b f449      	BRNE _0x46
                 ; 0000 0106       key=10;
00020c e0ea      	LDI  R30,LOW(10)
00020d 2e5e      	MOV  R5,R30
                 ; 0000 0107       lcd_gotoxy(3,0);
00020e e0e3      	LDI  R30,LOW(3)
00020f 93ea      	ST   -Y,R30
000210 e0a0      	LDI  R26,LOW(0)
000211 d025      	RCALL _lcd_gotoxy
                 ; 0000 0108       lcd_putsf("reset pass");}
                +
000212 eaa4     +LDI R26 , LOW ( 2 * _0x0 + ( 52 ) )
000213 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW2FN _0x0,52
000214 d067      	RCALL _lcd_putsf
                 ; 0000 0109 
                 ; 0000 010A       }
                 _0x46:
000215 cf7c      	RJMP _0x2E
                 ; 0000 010B }
                 _0x47:
000216 cfff      	RJMP _0x47
                 ; .FEND
                 
                 	.DSEG
                 _0x32:
000260           	.BYTE 0xB
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000217 93aa      	ST   -Y,R26
000218 b3e5      	IN   R30,0x15
000219 70ef      	ANDI R30,LOW(0xF)
00021a 2fae      	MOV  R26,R30
00021b 81e8      	LD   R30,Y
00021c 7fe0      	ANDI R30,LOW(0xF0)
00021d 2bea      	OR   R30,R26
00021e bbe5      	OUT  0x15,R30
                +
00021f e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000220 958a     +DEC R24
000221 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000222 9aaa      	SBI  0x15,2
                +
000223 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000224 958a     +DEC R24
000225 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000226 98aa      	CBI  0x15,2
                +
000227 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000228 958a     +DEC R24
000229 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00022a c090      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00022b 93aa      	ST   -Y,R26
00022c 81a8      	LD   R26,Y
00022d dfe9      	RCALL __lcd_write_nibble_G100
00022e 81e8          ld    r30,y
00022f 95e2          swap  r30
000230 83e8          st    y,r30
000231 81a8      	LD   R26,Y
000232 dfe4      	RCALL __lcd_write_nibble_G100
                +
000233 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000234 958a     +DEC R24
000235 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000236 c084      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000237 93aa      	ST   -Y,R26
000238 81e8      	LD   R30,Y
000239 e0f0      	LDI  R31,0
00023a 57e9      	SUBI R30,LOW(-__base_y_G100)
00023b 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00023c 81e0      	LD   R30,Z
00023d 81a9      	LDD  R26,Y+1
00023e 0fae      	ADD  R26,R30
00023f dfeb      	RCALL __lcd_write_data
000240 80c9      	LDD  R12,Y+1
000241 81e8      	LD   R30,Y
000242 93e0 028b 	STS  __lcd_y,R30
000244 9622      	ADIW R28,2
000245 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000246 e0a2      	LDI  R26,LOW(2)
000247 940e 048c 	CALL SUBOPT_0x2
000249 e0ac      	LDI  R26,LOW(12)
00024a dfe0      	RCALL __lcd_write_data
00024b e0a1      	LDI  R26,LOW(1)
00024c 940e 048c 	CALL SUBOPT_0x2
00024e e0e0      	LDI  R30,LOW(0)
00024f 93e0 028b 	STS  __lcd_y,R30
000251 2ece      	MOV  R12,R30
000252 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000253 93aa      	ST   -Y,R26
000254 81a8      	LD   R26,Y
000255 30aa      	CPI  R26,LOW(0xA)
000256 f021      	BREQ _0x2000005
000257 91e0 028c 	LDS  R30,__lcd_maxx
000259 16ce      	CP   R12,R30
00025a f060      	BRLO _0x2000004
                 _0x2000005:
00025b e0e0      	LDI  R30,LOW(0)
00025c 93ea      	ST   -Y,R30
00025d 91a0 028b 	LDS  R26,__lcd_y
00025f 5faf      	SUBI R26,-LOW(1)
000260 93a0 028b 	STS  __lcd_y,R26
000262 dfd4      	RCALL _lcd_gotoxy
000263 81a8      	LD   R26,Y
000264 30aa      	CPI  R26,LOW(0xA)
000265 f409      	BRNE _0x2000007
000266 c054      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
000267 94c3      	INC  R12
000268 9aa8      	SBI  0x15,0
000269 81a8      	LD   R26,Y
00026a dfc0      	RCALL __lcd_write_data
00026b 98a8      	CBI  0x15,0
00026c c04e      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00026d 93ba      	ST   -Y,R27
00026e 93aa      	ST   -Y,R26
00026f 931a      	ST   -Y,R17
                 _0x2000008:
000270 81a9      	LDD  R26,Y+1
000271 81ba      	LDD  R27,Y+1+1
000272 91ed      	LD   R30,X+
000273 83a9      	STD  Y+1,R26
000274 83ba      	STD  Y+1+1,R27
000275 2f1e      	MOV  R17,R30
000276 30e0      	CPI  R30,0
000277 f019      	BREQ _0x200000A
000278 2fa1      	MOV  R26,R17
000279 dfd9      	RCALL _lcd_putchar
00027a cff5      	RJMP _0x2000008
                 _0x200000A:
00027b c010      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00027c 93ba      	ST   -Y,R27
00027d 93aa      	ST   -Y,R26
00027e 931a      	ST   -Y,R17
                 _0x200000B:
00027f 81e9      	LDD  R30,Y+1
000280 81fa      	LDD  R31,Y+1+1
000281 9631      	ADIW R30,1
000282 83e9      	STD  Y+1,R30
000283 83fa      	STD  Y+1+1,R31
000284 9731      	SBIW R30,1
000285 91e4      	LPM  R30,Z
000286 2f1e      	MOV  R17,R30
000287 30e0      	CPI  R30,0
000288 f019      	BREQ _0x200000D
000289 2fa1      	MOV  R26,R17
00028a dfc8      	RCALL _lcd_putchar
00028b cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x20C0003:
00028c 8118      	LDD  R17,Y+0
00028d 9623      	ADIW R28,3
00028e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00028f 93aa      	ST   -Y,R26
000290 b3e4      	IN   R30,0x14
000291 6fe0      	ORI  R30,LOW(0xF0)
000292 bbe4      	OUT  0x14,R30
000293 9aa2      	SBI  0x14,2
000294 9aa0      	SBI  0x14,0
000295 9aa1      	SBI  0x14,1
000296 98aa      	CBI  0x15,2
000297 98a8      	CBI  0x15,0
000298 98a9      	CBI  0x15,1
000299 81e8      	LD   R30,Y
00029a 93e0 028c 	STS  __lcd_maxx,R30
00029c 58e0      	SUBI R30,-LOW(128)
                +
00029d 93e0 0289+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00029f 81e8      	LD   R30,Y
0002a0 54e0      	SUBI R30,-LOW(192)
                +
0002a1 93e0 028a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002a3 e1a4      	LDI  R26,LOW(20)
0002a4 e0b0      	LDI  R27,0
0002a5 940e 04c5 	CALL _delay_ms
0002a7 940e 0492 	CALL SUBOPT_0x3
0002a9 940e 0492 	CALL SUBOPT_0x3
0002ab 940e 0492 	CALL SUBOPT_0x3
0002ad e2a0      	LDI  R26,LOW(32)
0002ae df68      	RCALL __lcd_write_nibble_G100
                +
0002af e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002b0 958a     +DEC R24
0002b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0002b2 e2a8      	LDI  R26,LOW(40)
0002b3 df77      	RCALL __lcd_write_data
0002b4 e0a4      	LDI  R26,LOW(4)
0002b5 df75      	RCALL __lcd_write_data
0002b6 e8a5      	LDI  R26,LOW(133)
0002b7 df73      	RCALL __lcd_write_data
0002b8 e0a6      	LDI  R26,LOW(6)
0002b9 df71      	RCALL __lcd_write_data
0002ba df8b      	RCALL _lcd_clear
                 _0x20C0002:
0002bb 9621      	ADIW R28,1
0002bc 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0002bd 93ba      	ST   -Y,R27
0002be 93aa      	ST   -Y,R26
0002bf 931a      	ST   -Y,R17
0002c0 930a      	ST   -Y,R16
0002c1 81aa      	LDD  R26,Y+2
0002c2 81bb      	LDD  R27,Y+2+1
0002c3 9612      	ADIW R26,2
0002c4 940e 04d7 	CALL __GETW1P
0002c6 9730      	SBIW R30,0
0002c7 f159      	BREQ _0x2020010
0002c8 81aa      	LDD  R26,Y+2
0002c9 81bb      	LDD  R27,Y+2+1
0002ca 9614      	ADIW R26,4
0002cb 940e 04d7 	CALL __GETW1P
0002cd 018f      	MOVW R16,R30
0002ce 9730      	SBIW R30,0
0002cf f061      	BREQ _0x2020012
                +
0002d0 3002     +CPI R16 , LOW ( 2 )
0002d1 e0e0     +LDI R30 , HIGH ( 2 )
0002d2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002d3 f098      	BRLO _0x2020013
0002d4 01f8      	MOVW R30,R16
0002d5 9731      	SBIW R30,1
0002d6 018f      	MOVW R16,R30
                +
0002d7 81aa     +LDD R26 , Y + 2
0002d8 81bb     +LDD R27 , Y + 2 + 1
0002d9 9614     +ADIW R26 , 4
0002da 93ed     +ST X + , R30
0002db 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0002dc 81aa      	LDD  R26,Y+2
0002dd 81bb      	LDD  R27,Y+2+1
0002de 9612      	ADIW R26,2
0002df 91ed      	LD   R30,X+
0002e0 91fd      	LD   R31,X+
0002e1 9631      	ADIW R30,1
0002e2 93fe      	ST   -X,R31
0002e3 93ee      	ST   -X,R30
0002e4 9731      	SBIW R30,1
0002e5 81ac      	LDD  R26,Y+4
0002e6 83a0      	STD  Z+0,R26
                 _0x2020013:
0002e7 81aa      	LDD  R26,Y+2
0002e8 81bb      	LDD  R27,Y+2+1
0002e9 940e 04d7 	CALL __GETW1P
0002eb 23ff      	TST  R31
0002ec f02a      	BRMI _0x2020014
0002ed 91ed      	LD   R30,X+
0002ee 91fd      	LD   R31,X+
0002ef 9631      	ADIW R30,1
0002f0 93fe      	ST   -X,R31
0002f1 93ee      	ST   -X,R30
                 _0x2020014:
0002f2 c006      	RJMP _0x2020015
                 _0x2020010:
0002f3 81aa      	LDD  R26,Y+2
0002f4 81bb      	LDD  R27,Y+2+1
0002f5 efef      	LDI  R30,LOW(65535)
0002f6 efff      	LDI  R31,HIGH(65535)
0002f7 93ed      	ST   X+,R30
0002f8 93fc      	ST   X,R31
                 _0x2020015:
0002f9 8119      	LDD  R17,Y+1
0002fa 8108      	LDD  R16,Y+0
0002fb 9625      	ADIW R28,5
0002fc 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002fd 93ba      	ST   -Y,R27
0002fe 93aa      	ST   -Y,R26
0002ff 9726      	SBIW R28,6
000300 940e 04e4 	CALL __SAVELOCR6
000302 e010      	LDI  R17,0
000303 85ac      	LDD  R26,Y+12
000304 85bd      	LDD  R27,Y+12+1
000305 e0e0      	LDI  R30,LOW(0)
000306 e0f0      	LDI  R31,HIGH(0)
000307 93ed      	ST   X+,R30
000308 93fc      	ST   X,R31
                 _0x2020016:
000309 89ea      	LDD  R30,Y+18
00030a 89fb      	LDD  R31,Y+18+1
00030b 9631      	ADIW R30,1
00030c 8bea      	STD  Y+18,R30
00030d 8bfb      	STD  Y+18+1,R31
00030e 9731      	SBIW R30,1
00030f 91e4      	LPM  R30,Z
000310 2f2e      	MOV  R18,R30
000311 30e0      	CPI  R30,0
000312 f409      	BRNE PC+2
000313 c115      	RJMP _0x2020018
000314 2fe1      	MOV  R30,R17
000315 30e0      	CPI  R30,0
000316 f439      	BRNE _0x202001C
000317 3225      	CPI  R18,37
000318 f411      	BRNE _0x202001D
000319 e011      	LDI  R17,LOW(1)
00031a c002      	RJMP _0x202001E
                 _0x202001D:
00031b 940e 0499 	CALL SUBOPT_0x4
                 _0x202001E:
00031d c10a      	RJMP _0x202001B
                 _0x202001C:
00031e 30e1      	CPI  R30,LOW(0x1)
00031f f4a9      	BRNE _0x202001F
000320 3225      	CPI  R18,37
000321 f419      	BRNE _0x2020020
000322 940e 0499 	CALL SUBOPT_0x4
000324 c102      	RJMP _0x20200CC
                 _0x2020020:
000325 e012      	LDI  R17,LOW(2)
000326 e040      	LDI  R20,LOW(0)
000327 e000      	LDI  R16,LOW(0)
000328 322d      	CPI  R18,45
000329 f411      	BRNE _0x2020021
00032a e001      	LDI  R16,LOW(1)
00032b c0fc      	RJMP _0x202001B
                 _0x2020021:
00032c 322b      	CPI  R18,43
00032d f411      	BRNE _0x2020022
00032e e24b      	LDI  R20,LOW(43)
00032f c0f8      	RJMP _0x202001B
                 _0x2020022:
000330 3220      	CPI  R18,32
000331 f411      	BRNE _0x2020023
000332 e240      	LDI  R20,LOW(32)
000333 c0f4      	RJMP _0x202001B
                 _0x2020023:
000334 c002      	RJMP _0x2020024
                 _0x202001F:
000335 30e2      	CPI  R30,LOW(0x2)
000336 f439      	BRNE _0x2020025
                 _0x2020024:
000337 e050      	LDI  R21,LOW(0)
000338 e013      	LDI  R17,LOW(3)
000339 3320      	CPI  R18,48
00033a f411      	BRNE _0x2020026
00033b 6800      	ORI  R16,LOW(128)
00033c c0eb      	RJMP _0x202001B
                 _0x2020026:
00033d c003      	RJMP _0x2020027
                 _0x2020025:
00033e 30e3      	CPI  R30,LOW(0x3)
00033f f009      	BREQ PC+2
000340 c0e7      	RJMP _0x202001B
                 _0x2020027:
000341 3320      	CPI  R18,48
000342 f010      	BRLO _0x202002A
000343 332a      	CPI  R18,58
000344 f008      	BRLO _0x202002B
                 _0x202002A:
000345 c007      	RJMP _0x2020029
                 _0x202002B:
000346 e0aa      	LDI  R26,LOW(10)
000347 9f5a      	MUL  R21,R26
000348 2d50      	MOV  R21,R0
000349 2fe2      	MOV  R30,R18
00034a 53e0      	SUBI R30,LOW(48)
00034b 0f5e      	ADD  R21,R30
00034c c0db      	RJMP _0x202001B
                 _0x2020029:
00034d 2fe2      	MOV  R30,R18
00034e 36e3      	CPI  R30,LOW(0x63)
00034f f449      	BRNE _0x202002F
000350 940e 04a0 	CALL SUBOPT_0x5
000352 89e8      	LDD  R30,Y+16
000353 89f9      	LDD  R31,Y+16+1
000354 81a4      	LDD  R26,Z+4
000355 93aa      	ST   -Y,R26
000356 940e 04a6 	CALL SUBOPT_0x6
000358 c0ce      	RJMP _0x2020030
                 _0x202002F:
000359 37e3      	CPI  R30,LOW(0x73)
00035a f441      	BRNE _0x2020032
00035b 940e 04a0 	CALL SUBOPT_0x5
00035d 940e 04ac 	CALL SUBOPT_0x7
00035f 940e 046b 	CALL _strlen
000361 2f1e      	MOV  R17,R30
000362 c00a      	RJMP _0x2020033
                 _0x2020032:
000363 37e0      	CPI  R30,LOW(0x70)
000364 f461      	BRNE _0x2020035
000365 940e 04a0 	CALL SUBOPT_0x5
000367 940e 04ac 	CALL SUBOPT_0x7
000369 940e 0477 	CALL _strlenf
00036b 2f1e      	MOV  R17,R30
00036c 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00036d 6002      	ORI  R16,LOW(2)
00036e 770f      	ANDI R16,LOW(127)
00036f e030      	LDI  R19,LOW(0)
000370 c034      	RJMP _0x2020036
                 _0x2020035:
000371 36e4      	CPI  R30,LOW(0x64)
000372 f011      	BREQ _0x2020039
000373 36e9      	CPI  R30,LOW(0x69)
000374 f411      	BRNE _0x202003A
                 _0x2020039:
000375 6004      	ORI  R16,LOW(4)
000376 c002      	RJMP _0x202003B
                 _0x202003A:
000377 37e5      	CPI  R30,LOW(0x75)
000378 f431      	BRNE _0x202003C
                 _0x202003B:
000379 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00037a e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00037b 83ee      	STD  Y+6,R30
00037c 83ff      	STD  Y+6+1,R31
00037d e015      	LDI  R17,LOW(5)
00037e c00c      	RJMP _0x202003D
                 _0x202003C:
00037f 35e8      	CPI  R30,LOW(0x58)
000380 f411      	BRNE _0x202003F
000381 6008      	ORI  R16,LOW(8)
000382 c003      	RJMP _0x2020040
                 _0x202003F:
000383 37e8      	CPI  R30,LOW(0x78)
000384 f009      	BREQ PC+2
000385 c0a1      	RJMP _0x2020071
                 _0x2020040:
000386 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000387 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000388 83ee      	STD  Y+6,R30
000389 83ff      	STD  Y+6+1,R31
00038a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00038b ff02      	SBRS R16,2
00038c c014      	RJMP _0x2020042
00038d 940e 04a0 	CALL SUBOPT_0x5
00038f 940e 04b6 	CALL SUBOPT_0x8
000391 85ab      	LDD  R26,Y+11
000392 23aa      	TST  R26
000393 f43a      	BRPL _0x2020043
000394 85ea      	LDD  R30,Y+10
000395 85fb      	LDD  R31,Y+10+1
000396 940e 04d3 	CALL __ANEGW1
000398 87ea      	STD  Y+10,R30
000399 87fb      	STD  Y+10+1,R31
00039a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00039b 3040      	CPI  R20,0
00039c f011      	BREQ _0x2020044
00039d 5f1f      	SUBI R17,-LOW(1)
00039e c001      	RJMP _0x2020045
                 _0x2020044:
00039f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0003a0 c004      	RJMP _0x2020046
                 _0x2020042:
0003a1 940e 04a0 	CALL SUBOPT_0x5
0003a3 940e 04b6 	CALL SUBOPT_0x8
                 _0x2020046:
                 _0x2020036:
0003a5 fd00      	SBRC R16,0
0003a6 c011      	RJMP _0x2020047
                 _0x2020048:
0003a7 1715      	CP   R17,R21
0003a8 f478      	BRSH _0x202004A
0003a9 ff07      	SBRS R16,7
0003aa c008      	RJMP _0x202004B
0003ab ff02      	SBRS R16,2
0003ac c004      	RJMP _0x202004C
0003ad 7f0b      	ANDI R16,LOW(251)
0003ae 2f24      	MOV  R18,R20
0003af 5011      	SUBI R17,LOW(1)
0003b0 c001      	RJMP _0x202004D
                 _0x202004C:
0003b1 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003b2 c001      	RJMP _0x202004E
                 _0x202004B:
0003b3 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0003b4 940e 0499 	CALL SUBOPT_0x4
0003b6 5051      	SUBI R21,LOW(1)
0003b7 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0003b8 2f31      	MOV  R19,R17
0003b9 ff01      	SBRS R16,1
0003ba c017      	RJMP _0x202004F
                 _0x2020050:
0003bb 3030      	CPI  R19,0
0003bc f0a1      	BREQ _0x2020052
0003bd ff03      	SBRS R16,3
0003be c006      	RJMP _0x2020053
0003bf 81ee      	LDD  R30,Y+6
0003c0 81ff      	LDD  R31,Y+6+1
0003c1 9125      	LPM  R18,Z+
0003c2 83ee      	STD  Y+6,R30
0003c3 83ff      	STD  Y+6+1,R31
0003c4 c005      	RJMP _0x2020054
                 _0x2020053:
0003c5 81ae      	LDD  R26,Y+6
0003c6 81bf      	LDD  R27,Y+6+1
0003c7 912d      	LD   R18,X+
0003c8 83ae      	STD  Y+6,R26
0003c9 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0003ca 940e 0499 	CALL SUBOPT_0x4
0003cc 3050      	CPI  R21,0
0003cd f009      	BREQ _0x2020055
0003ce 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0003cf 5031      	SUBI R19,LOW(1)
0003d0 cfea      	RJMP _0x2020050
                 _0x2020052:
0003d1 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003d2 e320      	LDI  R18,LOW(48)
0003d3 81ee      	LDD  R30,Y+6
0003d4 81ff      	LDD  R31,Y+6+1
0003d5 940e 04db 	CALL __GETW1PF
0003d7 87e8      	STD  Y+8,R30
0003d8 87f9      	STD  Y+8+1,R31
0003d9 81ee      	LDD  R30,Y+6
0003da 81ff      	LDD  R31,Y+6+1
0003db 9632      	ADIW R30,2
0003dc 83ee      	STD  Y+6,R30
0003dd 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0003de 85e8      	LDD  R30,Y+8
0003df 85f9      	LDD  R31,Y+8+1
0003e0 85aa      	LDD  R26,Y+10
0003e1 85bb      	LDD  R27,Y+10+1
0003e2 17ae      	CP   R26,R30
0003e3 07bf      	CPC  R27,R31
0003e4 f050      	BRLO _0x202005C
0003e5 5f2f      	SUBI R18,-LOW(1)
0003e6 85a8      	LDD  R26,Y+8
0003e7 85b9      	LDD  R27,Y+8+1
0003e8 85ea      	LDD  R30,Y+10
0003e9 85fb      	LDD  R31,Y+10+1
0003ea 1bea      	SUB  R30,R26
0003eb 0bfb      	SBC  R31,R27
0003ec 87ea      	STD  Y+10,R30
0003ed 87fb      	STD  Y+10+1,R31
0003ee cfef      	RJMP _0x202005A
                 _0x202005C:
0003ef 332a      	CPI  R18,58
0003f0 f028      	BRLO _0x202005D
0003f1 ff03      	SBRS R16,3
0003f2 c002      	RJMP _0x202005E
0003f3 5f29      	SUBI R18,-LOW(7)
0003f4 c001      	RJMP _0x202005F
                 _0x202005E:
0003f5 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003f6 fd04      	SBRC R16,4
0003f7 c01a      	RJMP _0x2020061
0003f8 3321      	CPI  R18,49
0003f9 f420      	BRSH _0x2020063
0003fa 85a8      	LDD  R26,Y+8
0003fb 85b9      	LDD  R27,Y+8+1
0003fc 9711      	SBIW R26,1
0003fd f409      	BRNE _0x2020062
                 _0x2020063:
0003fe c009      	RJMP _0x20200CD
                 _0x2020062:
0003ff 1753      	CP   R21,R19
000400 f010      	BRLO _0x2020067
000401 ff00      	SBRS R16,0
000402 c001      	RJMP _0x2020068
                 _0x2020067:
000403 c013      	RJMP _0x2020066
                 _0x2020068:
000404 e220      	LDI  R18,LOW(32)
000405 ff07      	SBRS R16,7
000406 c00b      	RJMP _0x2020069
000407 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000408 6100      	ORI  R16,LOW(16)
000409 ff02      	SBRS R16,2
00040a c007      	RJMP _0x202006A
00040b 7f0b      	ANDI R16,LOW(251)
00040c 934a      	ST   -Y,R20
00040d 940e 04a6 	CALL SUBOPT_0x6
00040f 3050      	CPI  R21,0
000410 f009      	BREQ _0x202006B
000411 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000412 940e 0499 	CALL SUBOPT_0x4
000414 3050      	CPI  R21,0
000415 f009      	BREQ _0x202006C
000416 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000417 5031      	SUBI R19,LOW(1)
000418 85a8      	LDD  R26,Y+8
000419 85b9      	LDD  R27,Y+8+1
00041a 9712      	SBIW R26,2
00041b f008      	BRLO _0x2020059
00041c cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00041d ff00      	SBRS R16,0
00041e c008      	RJMP _0x202006D
                 _0x202006E:
00041f 3050      	CPI  R21,0
000420 f031      	BREQ _0x2020070
000421 5051      	SUBI R21,LOW(1)
000422 e2e0      	LDI  R30,LOW(32)
000423 93ea      	ST   -Y,R30
000424 940e 04a6 	CALL SUBOPT_0x6
000426 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000427 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000428 cee0      	RJMP _0x2020016
                 _0x2020018:
000429 85ac      	LDD  R26,Y+12
00042a 85bd      	LDD  R27,Y+12+1
00042b 940e 04d7 	CALL __GETW1P
00042d 940e 04eb 	CALL __LOADLOCR6
00042f 9664      	ADIW R28,20
000430 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000431 92ff      	PUSH R15
000432 2ef8      	MOV  R15,R24
000433 9726      	SBIW R28,6
000434 940e 04e6 	CALL __SAVELOCR4
000436 940e 04be 	CALL SUBOPT_0x9
000438 9730      	SBIW R30,0
000439 f419      	BRNE _0x2020072
00043a efef      	LDI  R30,LOW(65535)
00043b efff      	LDI  R31,HIGH(65535)
00043c c023      	RJMP _0x20C0001
                 _0x2020072:
00043d 01de      	MOVW R26,R28
00043e 9616      	ADIW R26,6
00043f 940e 04cf 	CALL __ADDW2R15
000441 018d      	MOVW R16,R26
000442 940e 04be 	CALL SUBOPT_0x9
000444 83ee      	STD  Y+6,R30
000445 83ff      	STD  Y+6+1,R31
000446 e0e0      	LDI  R30,LOW(0)
000447 87e8      	STD  Y+8,R30
000448 87e9      	STD  Y+8+1,R30
000449 01de      	MOVW R26,R28
00044a 961a      	ADIW R26,10
00044b 940e 04cf 	CALL __ADDW2R15
00044d 940e 04d7 	CALL __GETW1P
00044f 93fa      	ST   -Y,R31
000450 93ea      	ST   -Y,R30
000451 931a      	ST   -Y,R17
000452 930a      	ST   -Y,R16
000453 ebed      	LDI  R30,LOW(_put_buff_G101)
000454 e0f2      	LDI  R31,HIGH(_put_buff_G101)
000455 93fa      	ST   -Y,R31
000456 93ea      	ST   -Y,R30
000457 01de      	MOVW R26,R28
000458 961a      	ADIW R26,10
000459 dea3      	RCALL __print_G101
00045a 019f      	MOVW R18,R30
00045b 81ae      	LDD  R26,Y+6
00045c 81bf      	LDD  R27,Y+6+1
00045d e0e0      	LDI  R30,LOW(0)
00045e 93ec      	ST   X,R30
00045f 01f9      	MOVW R30,R18
                 _0x20C0001:
000460 940e 04ed 	CALL __LOADLOCR4
000462 962a      	ADIW R28,10
000463 90ff      	POP  R15
000464 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _cabs:
                 ; .FSTART _cabs
000465 93aa      	ST   -Y,R26
000466 91e9          ld   r30,y+
000467 30e0          cpi  r30,0
000468 f40a          brpl __cabs0
000469 95e1          neg  r30
                 __cabs0:
00046a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00046b 93ba      	ST   -Y,R27
00046c 93aa      	ST   -Y,R26
00046d 91a9          ld   r26,y+
00046e 91b9          ld   r27,y+
00046f 27ee          clr  r30
000470 27ff          clr  r31
                 strlen0:
000471 916d          ld   r22,x+
000472 2366          tst  r22
000473 f011          breq strlen1
000474 9631          adiw r30,1
000475 cffb          rjmp strlen0
                 strlen1:
000476 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000477 93ba      	ST   -Y,R27
000478 93aa      	ST   -Y,R26
000479 27aa          clr  r26
00047a 27bb          clr  r27
00047b 91e9          ld   r30,y+
00047c 91f9          ld   r31,y+
                 strlenf0:
00047d 9005      	lpm  r0,z+
00047e 2000          tst  r0
00047f f011          breq strlenf1
000480 9611          adiw r26,1
000481 cffb          rjmp strlenf0
                 strlenf1:
000482 01fd          movw r30,r26
000483 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _str:
00026b           	.BYTE 0x14
                 _data:
00027f           	.BYTE 0x4
                 _pass:
000283           	.BYTE 0x4
                 __base_y_G100:
000287           	.BYTE 0x4
                 __lcd_y:
00028b           	.BYTE 0x1
                 __lcd_maxx:
00028c           	.BYTE 0x1
                 __seed_G102:
00028d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000484 e0a2      	LDI  R26,LOW(2)
000485 e0b0      	LDI  R27,0
000486 940c 04c5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000488 eca8      	LDI  R26,LOW(200)
000489 e0b0      	LDI  R27,0
00048a 940c 04c5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00048c 940e 022b 	CALL __lcd_write_data
00048e e0a3      	LDI  R26,LOW(3)
00048f e0b0      	LDI  R27,0
000490 940c 04c5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000492 e3a0      	LDI  R26,LOW(48)
000493 940e 0217 	CALL __lcd_write_nibble_G100
                +
000495 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000496 958a     +DEC R24
000497 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000498 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000499 932a      	ST   -Y,R18
00049a 85ad      	LDD  R26,Y+13
00049b 85be      	LDD  R27,Y+13+1
00049c 85ef      	LDD  R30,Y+15
00049d 89f8      	LDD  R31,Y+15+1
00049e 9509      	ICALL
00049f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0004a0 89e8      	LDD  R30,Y+16
0004a1 89f9      	LDD  R31,Y+16+1
0004a2 9734      	SBIW R30,4
0004a3 8be8      	STD  Y+16,R30
0004a4 8bf9      	STD  Y+16+1,R31
0004a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0004a6 85ad      	LDD  R26,Y+13
0004a7 85be      	LDD  R27,Y+13+1
0004a8 85ef      	LDD  R30,Y+15
0004a9 89f8      	LDD  R31,Y+15+1
0004aa 9509      	ICALL
0004ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0004ac 89a8      	LDD  R26,Y+16
0004ad 89b9      	LDD  R27,Y+16+1
0004ae 9614      	ADIW R26,4
0004af 940e 04d7 	CALL __GETW1P
0004b1 83ee      	STD  Y+6,R30
0004b2 83ff      	STD  Y+6+1,R31
0004b3 81ae      	LDD  R26,Y+6
0004b4 81bf      	LDD  R27,Y+6+1
0004b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0004b6 89a8      	LDD  R26,Y+16
0004b7 89b9      	LDD  R27,Y+16+1
0004b8 9614      	ADIW R26,4
0004b9 940e 04d7 	CALL __GETW1P
0004bb 87ea      	STD  Y+10,R30
0004bc 87fb      	STD  Y+10+1,R31
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004be 01de      	MOVW R26,R28
0004bf 961c      	ADIW R26,12
0004c0 940e 04cf 	CALL __ADDW2R15
0004c2 940e 04d7 	CALL __GETW1P
0004c4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004c5 9610      	adiw r26,0
0004c6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004c7 ef8a     +LDI R24 , LOW ( 0xFA )
0004c8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0004c9 9701     +SBIW R24 , 1
0004ca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0004cb 95a8      	wdr
0004cc 9711      	sbiw r26,1
0004cd f7c9      	brne __delay_ms0
                 __delay_ms1:
0004ce 9508      	ret
                 
                 __ADDW2R15:
0004cf 2400      	CLR  R0
0004d0 0daf      	ADD  R26,R15
0004d1 1db0      	ADC  R27,R0
0004d2 9508      	RET
                 
                 __ANEGW1:
0004d3 95f1      	NEG  R31
0004d4 95e1      	NEG  R30
0004d5 40f0      	SBCI R31,0
0004d6 9508      	RET
                 
                 __GETW1P:
0004d7 91ed      	LD   R30,X+
0004d8 91fc      	LD   R31,X
0004d9 9711      	SBIW R26,1
0004da 9508      	RET
                 
                 __GETW1PF:
0004db 9005      	LPM  R0,Z+
0004dc 91f4      	LPM  R31,Z
0004dd 2de0      	MOV  R30,R0
0004de 9508      	RET
                 
                 __PUTPARD1:
0004df 937a      	ST   -Y,R23
0004e0 936a      	ST   -Y,R22
0004e1 93fa      	ST   -Y,R31
0004e2 93ea      	ST   -Y,R30
0004e3 9508      	RET
                 
                 __SAVELOCR6:
0004e4 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004e5 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004e6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004e7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004e8 931a      	ST   -Y,R17
0004e9 930a      	ST   -Y,R16
0004ea 9508      	RET
                 
                 __LOADLOCR6:
0004eb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004ec 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004ed 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004ee 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004ef 8119      	LDD  R17,Y+1
0004f0 8108      	LD   R16,Y
0004f1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   5 r5 :  29 r6 :   2 r7 :   2 
r8 :   5 r9 :   2 r10:   6 r11:   8 r12:   4 r13:   5 r14:   0 r15:   6 
r16:  34 r17:  33 r18:  29 r19:   8 r20:   9 r21:  17 r22:   8 r23:   4 
r24:  27 r25:   5 r26: 126 r27:  51 r28:  14 r29:   1 r30: 311 r31:  73 
x  :  24 y  : 207 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  22 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   1 brne  :  43 brpl  :   2 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  56 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  21 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  22 cpc   :   2 cpi   :  36 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   6 jmp   :  26 ld    :  45 ldd   :  77 ldi   : 170 
lds   :   2 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  45 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   1 
ori   :  10 out   :  35 pop   :   1 push  :   1 rcall :  44 ret   :  28 
reti  :   2 rjmp  :  82 rol   :   0 ror   :   0 sbc   :   1 sbci  :   7 
sbi   :  10 sbic  :  12 sbis  :   2 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  83 std   :  33 sts   :   6 sub   :   2 subi  :  23 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009e4   2394    138   2532   32768   7.7%
[.dseg] 0x000060 0x000291      0     49     49    2048   2.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
